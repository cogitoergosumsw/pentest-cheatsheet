$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
$PDC = ($domainObj.PdcRoleOwner).Name
$SearchString = "LDAP://"
$SearchString += $PDC + "/"
$DistinguishedName = "DC=$($domainObj.Name.Replace('.', ',DC='))"
$SearchString += $DistinguishedName
$Searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$SearchString)
$objDomain = New-Object System.DirectoryServices.DirectoryEntry
$Searcher.SearchRoot = $objDomain
$Searcher.filter="(objectClass=Group)"
$Result = $Searcher.FindAll()
# Foreach($obj in $Result)
# {
#     $obj.Properties.name
# }

# -- Pseudocode --
# DFS(objectName, depth):
	# for each member of objectName:
		# print (depth * '  ') + member

		# If member has its own members and depth < MAX_DEPTH:
			# for each sub_member of member:
				# DFS(sub_member, depth+1)

$MAX_DEPTH = 10

function Group_DFS_Inner($groupName, $depth)
{
	$Searcher.filter="(name=" + $groupName + ")"
	$result = $Searcher.FindAll()

	foreach($groupMember in $result)
	{
		"$('    ' * $depth)$($groupMember.properties.name)"

		if ($groupMember.properties.member -AND $depth -lt $MAX_DEPTH)
		{
			# The group's member has its own members; it must be a nested group.
			# Loop over each of its own members to continue the DFS from these groups.
			foreach ($childMember in $groupMember.properties.member)
			{
				$childMemberName=($childMember.substring(3) -split ',')[0]  # Extract the CN
				Group_DFS_Inner $childMemberName ($depth + 1)
			}
		}
	}
}

function Group_DFS($objectName)
{
	Group_DFS_Inner $objectName 0
}

Group_DFS('Secret_Group') # just an example